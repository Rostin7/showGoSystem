<template>
  <div style="width: 210px; height: 168px;" v-show="false">
    <canvas ref="myCanvas"  :width="this.width" :height="this.height" class="canvas"></canvas>
    <!-- <img :src="imgSrc" alt=""> -->
  </div>
</template>
<script>
import sha256 from 'sha256'
import { promises } from 'fs'
export default {
  props: {
    type: {},
    imgUrl: {},
    lotteryStartTime: {},
    price: {},
    showPrice: {},
    endTime: {}
  },
  data(){
    return{
      imgSrc: '',
      ctx: {},
      changeimg: false,
      width: 210,
      height: 168,
      // 685* 410
      imgWidth: 210,
      imgHeight: 110,
      txtFont:16,
    }
  },
  methods: {
    drawImg(drawData) {
      return new Promise((resolve, reject) => {
        let myCanvas = this.$refs.myCanvas
        this.ctx = myCanvas.getContext('2d')
        this.ctx.fillStyle = '#ffffff'
        this.ctx.fillRect(0, 0, this.width, this.height)
        var img = new Image()
        img.setAttribute("crossOrigin",'anonymous')
        img.src = drawData.imgUrl
        img.onload = () => {
          this.ctx.drawImage(img, 0, 0,this.imgWidth,this.imgHeight)
          switch(drawData.type) {
          case 701:
            this.drawText(0)
            this.drawTime(drawData.lotteryType == 110 ? `${this.timeChange('Y-m-d', drawData.lotteryStartTime)}开奖` : `满${drawData.totalNum}人开奖`)
            this.drawButton('去抽奖')
            break
          case 301:
            this.drawText(drawData.price, drawData.showPrice, false)
            this.drawButton('去抢购')
            break
          case 101:
            this.drawText(drawData.price, drawData.showPrice)
            this.drawTime(`报名截止${this.timeChange('Y-m-d', drawData.endTime)}`)
            this.drawButton('去报名')
            break
          }
          resolve()
        }
      })
    },
    // 绘制时间
    drawTime(timeText) {
      this.ctx.fillStyle = '#666666'
      this.ctx.font = '24px Arial bolder'
      this.ctx.fillText(timeText,  5, 140)
    },
    // 绘制价格
    drawText(price, showPrice, isTop = true) {
      if(price) {
        this.ctx.fillStyle = '#EF4F59'
        this.ctx.font = '20px Arial '
        this.ctx.fillText(price, 0, 140)
        let widthPrice = this.ctx.measureText(price).width
        this.ctx.fillStyle = '#EF4F59'
        this.ctx.font = this.txtFont + 'px Arial '
        this.ctx.fillText('元', widthPrice + 2, 140)
        // 原价
        this.ctx.fillStyle = '#999999'
        this.ctx.font = this.txtFont + 'px Arial '
        this.ctx.fillText(`原价:${showPrice}`, widthPrice + 20, 140)
        // 绘制原价的划线
        this.ctx.moveTo (widthPrice + 20, 135)       //设置起点状态
        this.ctx.lineTo (widthPrice + 20 + this.ctx.measureText(`原价:${showPrice}`).width, 135)       //设置末端状态
        this.ctx.lineWidth = 2       //设置线宽状态
        this.ctx.strokeStyle = "#999999"  //设置线的颜色状态
        this.ctx.stroke()
      } else {
        if(isTop) {
          this.ctx.fillStyle = '#EF4F59'
          this.ctx.font = this.txtFont + 'px Arial '
          this.ctx.fillText(`免费`, 5, 140)
        } else {
          this.ctx.fillStyle = '#EF4F59'
          this.ctx.font = this.txtFont + 'px Arial '
          this.ctx.fillText(`免费`, 5, 140)
        }
      }
    },
    // 绘制按钮
    drawButton(buttonText) {
      this.roundedRect(this.ctx, 134, 124, 70, 20, 5, '#C8101C')
      this.ctx.fillStyle = '#ffffff'
      this.ctx.font = this.txtFont + 'px Arial '
      this.ctx.fillText(buttonText, 144, 139, 120)
    },
    // 绘制图块
    roundedRect(ctx, x, y, width, height, radius, color) {
      // ctx.strokeStyle = "#ffffff";
      ctx.strokeStyle = color
      ctx.fillStyle = color
      ctx.beginPath()
      ctx.moveTo(x, y + radius)
      ctx.lineTo(x, y + height - radius)
      ctx.quadraticCurveTo(x, y + height, x + radius, y + height)
      ctx.lineTo(x + width - radius, y + height)
      ctx.quadraticCurveTo(x + width, y + height, x + width, y + height - radius)
      ctx.lineTo(x + width, y + radius)
      ctx.quadraticCurveTo(x + width, y, x + width - radius, y)
      ctx.lineTo(x + radius, y)
      ctx.quadraticCurveTo(x, y, x, y + radius)
      ctx.fill()
      ctx.stroke()
    },
    // base64转为blob为文件
    dataURLtoFile(dataurl, filename) {//将base64转换为文件
      var arr = dataurl.split(','), mime = arr[0].match(/:(.*?);/)[1]
      const bytes = window.atob(dataurl.split(',')[1])
      var ab = new ArrayBuffer(bytes.length);  
      var ia = new Uint8Array(ab);  
      for (var i = 0; i < bytes.length; i++) {  
          ia[i] = bytes.charCodeAt(i);  
      } 
      return new Blob( [ab] , {type : mime});  
    },
    upload() {
      return new Promise((resolve, reject) => {
        const formData = new FormData()
        this.imgSrc = this.$refs.myCanvas.toDataURL("image/png")
        const file = this.dataURLtoFile(this.$refs.myCanvas.toDataURL('image/png'), 'shareImg')
        formData.append('file', file)
        formData.append('userId', this.$cookie.get('uid'))
        formData.append('sign', sha256(this.apiList.upload + this.$cookie.get('token')))
        this.loading = true
        this.$http({
          url: this.$http.adornUrl(this.apiList.upload),
          method: 'post',
          headers: {
            'Content-Type': 'multipart/form-data'
          },
          data: formData
        }).then(({ data }) => {
          if (data.result) {
            resolve(data.data)
          } else {
            reject()
          }
        })
      })
    },
    // 提交前的验证
    finish() {
      return new Promise((resolve, reject) => {
        if(this.changeimg) {
          const vm = this
          const formData = {
            type: vm.type,
            imgUrl: vm.imgUrl,
            lotteryStartTime: vm.lotteryStartTime,
            price: vm.price,
            showPrice: vm.showPrice,
            endTime: vm.endTime,
          }
          this.drawImg(formData).then(() => {
            this.upload().then((data) => {
              resolve(data)
            })
          }).catch(() => {
            reject()
          })
        } else {
          reject()
        }
      })
    }
  },
  watch: {
    imgUrl() {
      this.changeimg = true
    },
    lotteryStartTime() {
      this.changeimg = true
    },
    price() {
      this.changeimg = true
    },
    showPrice() {
      this.changeimg = true
    },
    endTime() {
      this.changeimg = true
    },
  }
}
</script>